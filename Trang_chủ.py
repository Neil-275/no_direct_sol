import streamlit as st
import time
from datetime import datetime
from utils.authentification import require_login, show_user_info, get_current_user
import json
import os

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Bot_d·∫°y_h·ªçc - Trang Ch·ªß",
    page_icon="üéì",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh cho trang ch·ªß
st.markdown("""
<style>
/* Import Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

/* Reset v√† base styles */
.main .block-container {
    padding-top: 2rem;
    padding-bottom: 2rem;
}

/* Hero Section */
.hero-section {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 4rem 2rem;
    border-radius: 20px;
    text-align: center;
    margin-bottom: 3rem;
    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
    position: relative;
    overflow: hidden;
}

.hero-section::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.1'%3E%3Ccircle cx='7' cy='7' r='7'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
    animation: float 20s ease-in-out infinite;
    z-index: 1;
}

.hero-content {
    position: relative;
    z-index: 2;
}

.hero-title {
    font-size: 3.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
}

.hero-subtitle {
    font-size: 1.3rem;
    margin-bottom: 2rem;
    opacity: 0.9;
    font-weight: 300;
}

.hero-stats {
    display: flex;
    justify-content: center;
    gap: 3rem;
    margin-top: 2rem;
}

.stat-item {
    text-align: center;
}

.stat-number {
    font-size: 2.5rem;
    font-weight: 700;
    display: block;
}

.stat-label {
    font-size: 0.9rem;
    opacity: 0.8;
}

/* Feature Cards */
.feature-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin: 3rem 0;
}

.feature-card {
    background: white;
    padding: 2rem;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    transition: all 0.3s ease;
    border: 1px solid #f0f0f0;
    position: relative;
    overflow: hidden;
}

.feature-card:hover {
    transform: translateY(-10px);
    box-shadow: 0 20px 40px rgba(0,0,0,0.15);
}

.feature-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 4px;
    background: linear-gradient(90deg, #667eea, #764ba2);
}

.feature-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
    display: block;
}

.feature-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 1rem;
    color: #333;
}

.feature-description {
    color: #666;
    line-height: 1.6;
    margin-bottom: 1.5rem;
}

.feature-button {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 0.8rem 1.5rem;
    border: none;
    border-radius: 8px;
    text-decoration: none;
    display: inline-block;
    font-weight: 500;
    transition: all 0.3s ease;
}

.feature-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
    color: white;
    text-decoration: none;
}

/* Quick Stats */
.quick-stats {
    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    color: white;
    padding: 2rem;
    border-radius: 15px;
    margin: 3rem 0;
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 2rem;
    text-align: center;
}

.quick-stat-item {
    padding: 1rem;
}

.quick-stat-number {
    font-size: 2rem;
    font-weight: 700;
    display: block;
    margin-bottom: 0.5rem;
}

.quick-stat-label {
    font-size: 0.9rem;
    opacity: 0.9;
}

/* Welcome Message */
.welcome-message {
    background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
    padding: 2rem;
    border-radius: 15px;
    margin-bottom: 2rem;
    text-align: center;
}

.welcome-title {
    font-size: 2rem;
    font-weight: 600;
    color: #333;
    margin-bottom: 1rem;
}

.welcome-text {
    color: #666;
    font-size: 1.1rem;
    line-height: 1.6;
}

/* Recent Activity */
.activity-card {
    background: white;
    border: 1px solid #e0e0e0;
    border-radius: 10px;
    padding: 1.5rem;
    margin-bottom: 1rem;
    transition: all 0.3s ease;
}

.activity-card:hover {
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    transform: translateY(-2px);
}

.activity-time {
    color: #888;
    font-size: 0.9rem;
    margin-bottom: 0.5rem;
}

.activity-title {
    font-weight: 600;
    color: #333;
    margin-bottom: 0.5rem;
}

.activity-description {
    color: #666;
    font-size: 0.95rem;
}

/* Animations */
@keyframes float {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    50% { transform: translateY(-20px) rotate(180deg); }
}

@keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.7; }
}

.pulse {
    animation: pulse 2s ease-in-out infinite;
}

/* Responsive */
@media (max-width: 768px) {
    .hero-title {
        font-size: 2.5rem;
    }
    
    .hero-stats {
        flex-direction: column;
        gap: 1rem;
    }
    
    .feature-grid {
        grid-template-columns: 1fr;
    }
}

/* Loading Animation */
.loading-spinner {
    display: inline-block;
    width: 20px;
    height: 20px;
    border: 3px solid #f3f3f3;
    border-top: 3px solid #667eea;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
</style>
""", unsafe_allow_html=True)

def load_user_stats():
    """Load user statistics"""
    try:
        # Th·ªëng k√™ t·ª´ chat sessions
        if os.path.exists("chat_sessions.json"):
            with open("chat_sessions.json", "r", encoding="utf-8") as f:
                sessions = json.load(f)
                total_sessions = len(sessions)
                total_messages = sum(len(s.get("messages", [])) for s in sessions)
        else:
            total_sessions = 0
            total_messages = 0
        
        # Th·ªëng k√™ t·ª´ uploaded files
        upload_dir = "archives/uploads"
        total_files = len(os.listdir(upload_dir)) if os.path.exists(upload_dir) else 0
        
        return {
            "total_sessions": total_sessions,
            "total_messages": total_messages,
            "total_files": total_files,
            "study_hours": total_sessions * 0.5  # ∆Ø·ªõc t√≠nh
        }
    except:
        return {
            "total_sessions": 0,
            "total_messages": 0,
            "total_files": 0,
            "study_hours": 0
        }

def get_recent_activities():
    """Get recent user activities"""
    activities = []
    try:
        if os.path.exists("chat_sessions.json"):
            with open("chat_sessions.json", "r", encoding="utf-8") as f:
                sessions = json.load(f)
                # L·∫•y 5 session g·∫ßn nh·∫•t
                recent_sessions = sorted(sessions, key=lambda x: x.get("updated_at", ""), reverse=True)[:5]
                
                for session in recent_sessions:
                    if session.get("messages"):
                        activities.append({
                            "time": session.get("updated_at", ""),
                            "title": "Phi√™n chat m·ªõi",
                            "description": session.get("name", "Tr√≤ chuy·ªán v·ªõi Bot_d·∫°y_h·ªçc")[:50] + "..."
                        })
    except:
        pass
    
    return activities

# ===== KI·ªÇM TRA ƒêƒÇNG NH·∫¨P =====
if not require_login("Bot_d·∫°y_h·ªçc - Trang Ch·ªß"):
    # Hi·ªÉn th·ªã banner cho ng∆∞·ªùi ch∆∞a ƒëƒÉng nh·∫≠p
    st.markdown("""
    <div class="hero-section">
        <div class="hero-content">
            <h1 class="hero-title">üéì Bot_d·∫°y_h·ªçc</h1>
            <p class="hero-subtitle">Tr·ª£ l√Ω AI th√¥ng minh cho vi·ªác h·ªçc t·∫≠p</p>
            <p style="font-size: 1.1rem; margin-bottom: 2rem;">
                Kh√°m ph√° s·ª©c m·∫°nh c·ªßa AI trong gi√°o d·ª•c. H·ªçc t·∫≠p th√¥ng minh, hi·ªáu qu·∫£ v√† c√° nh√¢n h√≥a.
            </p>
            <div class="hero-stats">
                <div class="stat-item">
                    <span class="stat-number">1000+</span>
                    <span class="stat-label">H·ªçc sinh</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number">50+</span>
                    <span class="stat-label">M√¥n h·ªçc</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number">24/7</span>
                    <span class="stat-label">H·ªó tr·ª£</span>
                </div>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Th√¥ng b√°o y√™u c·∫ßu ƒëƒÉng nh·∫≠p
    st.info("üîê Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng c·ªßa Bot_d·∫°y_h·ªçc!")
    exit()

# Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng trong sidebar
show_user_info()

# ===== TRANG CH·ª¶ CHO NG∆Ø·ªúI ƒê√É ƒêƒÇNG NH·∫¨P =====
current_user = get_current_user()
user_stats = load_user_stats()
recent_activities = get_recent_activities()

# Welcome Message
st.markdown(f"""
<div class="welcome-message">
    <h2 class="welcome-title">Ch√†o m·ª´ng tr·ªü l·∫°i, {current_user}! üëã</h2>
    <p class="welcome-text">
        S·∫µn s√†ng ƒë·ªÉ ti·∫øp t·ª•c h√†nh tr√¨nh h·ªçc t·∫≠p c·ªßa b·∫°n? Bot_d·∫°y_h·ªçc lu√¥n ·ªü ƒë√¢y ƒë·ªÉ h·ªó tr·ª£ b·∫°n ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u h·ªçc t·∫≠p.
    </p>
</div>
""", unsafe_allow_html=True)

# Quick Stats
st.markdown("""
<div class="quick-stats">
    <h3 style="text-align: center; margin-bottom: 2rem; font-size: 1.8rem;">üìä Th·ªëng k√™ h·ªçc t·∫≠p c·ªßa b·∫°n</h3>
    <div class="stats-grid">
        <div class="quick-stat-item">
            <span class="quick-stat-number">{}</span>
            <span class="quick-stat-label">Phi√™n chat</span>
        </div>
        <div class="quick-stat-item">
            <span class="quick-stat-number">{}</span>
            <span class="quick-stat-label">Tin nh·∫Øn</span>
        </div>
        <div class="quick-stat-item">
            <span class="quick-stat-number">{}</span>
            <span class="quick-stat-label">T√†i li·ªáu</span>
        </div>
        <div class="quick-stat-item">
            <span class="quick-stat-number">{:.1f}h</span>
            <span class="quick-stat-label">Th·ªùi gian h·ªçc</span>
        </div>
    </div>
</div>
""".format(
    user_stats["total_sessions"],
    user_stats["total_messages"], 
    user_stats["total_files"],
    user_stats["study_hours"]
), unsafe_allow_html=True)

# Feature Cards
st.markdown("""
<div class="feature-grid">
    <div class="feature-card">
        <span class="feature-icon">üí¨</span>
        <h3 class="feature-title">Chat v·ªõi Bot_d·∫°y_h·ªçc</h3>
        <p class="feature-description">
            Tr√≤ chuy·ªán tr·ª±c ti·∫øp v·ªõi AI tutor th√¥ng minh. ƒê·∫∑t c√¢u h·ªèi, gi·∫£i b√†i t·∫≠p v√† nh·∫≠n ƒë∆∞·ª£c h∆∞·ªõng d·∫´n chi ti·∫øt.
        </p>
        <a href="/Bot_d·∫°y_h·ªçc" class="feature-button">B·∫Øt ƒë·∫ßu chat</a>
    </div>
    <div class="feature-card">
        <span class="feature-icon">üìö</span>
        <h3 class="feature-title">Kho T√†i Li·ªáu</h3>
        <p class="feature-description">
            Upload v√† qu·∫£n l√Ω t√†i li·ªáu h·ªçc t·∫≠p. S·ª≠ d·ª•ng RAG ƒë·ªÉ t√¨m ki·∫øm th√¥ng tin nhanh ch√≥ng v√† ch√≠nh x√°c.
        </p>
        <a href="/L∆∞u_tr·ªØ" class="feature-button">Xem kho l∆∞u tr·ªØ</a>
    </div>
    <div class="feature-card">
        <span class="feature-icon">üß†</span>
        <h3 class="feature-title">AI Th√¥ng Minh</h3>
        <p class="feature-description">
            C√¥ng ngh·ªá AI ti√™n ti·∫øn gi√∫p c√° nh√¢n h√≥a tr·∫£i nghi·ªám h·ªçc t·∫≠p v√† ƒë∆∞a ra l·ªùi khuy√™n ph√π h·ª£p.
        </p>
        <a href="#" class="feature-button">T√¨m hi·ªÉu th√™m</a>
    </div>
</div>
""", unsafe_allow_html=True)

# Recent Activities
col1, col2 = st.columns([2, 1])

with col1:
    st.markdown("### üìà Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y")
    
    if recent_activities:
        for activity in recent_activities:
            try:
                # Format time
                time_str = activity["time"][:16] if activity["time"] else "Kh√¥ng r√µ"
                
                st.markdown(f"""
                <div class="activity-card">
                    <div class="activity-time">{time_str}</div>
                    <div class="activity-title">{activity["title"]}</div>
                    <div class="activity-description">{activity["description"]}</div>
                </div>
                """, unsafe_allow_html=True)
            except:
                continue
    else:
        st.info("Ch∆∞a c√≥ ho·∫°t ƒë·ªông n√†o. H√£y b·∫Øt ƒë·∫ßu chat v·ªõi Bot_d·∫°y_h·ªçc!")

with col2:
    st.markdown("### üéØ M·ª•c ti√™u h√¥m nay")
    
    # Progress bars
    st.markdown("**Ti·∫øn ƒë·ªô h·ªçc t·∫≠p**")
    progress_value = min(user_stats["total_messages"] / 10, 1.0) if user_stats["total_messages"] > 0 else 0
    st.progress(progress_value)
    st.caption(f"ƒê√£ ho√†n th√†nh {int(progress_value * 100)}% m·ª•c ti√™u tin nh·∫Øn")
    
    st.markdown("**T√†i li·ªáu ƒë√£ xem**")
    file_progress = min(user_stats["total_files"] / 5, 1.0) if user_stats["total_files"] > 0 else 0
    st.progress(file_progress)
    st.caption(f"ƒê√£ xem {user_stats['total_files']} t√†i li·ªáu")
    
    # Quick Actions
    st.markdown("### ‚ö° Thao t√°c nhanh")
    
    if st.button("üÜï Chat m·ªõi", type="primary", use_container_width=True):
        st.switch_page("pages/Bot_d·∫°y_h·ªçc.py")
    
    if st.button("üì§ Upload t√†i li·ªáu", use_container_width=True):
        st.switch_page("pages/L∆∞u_tr·ªØ.py")
    
    if st.button("üìä Xem th·ªëng k√™", use_container_width=True):
        st.info("T√≠nh nƒÉng ƒëang ph√°t tri·ªÉn!")

# Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #666; padding: 2rem 0;">
    <p>üéì <strong>Bot_d·∫°y_h·ªçc</strong> - Tr·ª£ l√Ω AI th√¥ng minh cho vi·ªác h·ªçc t·∫≠p</p>
    <p>Phi√™n b·∫£n 1.0 | ¬© 2024 Bot_d·∫°y_h·ªçc Team</p>
</div>
""", unsafe_allow_html=True)

# Auto-refresh stats every 30 seconds
if st.button("üîÑ L√†m m·ªõi", help="C·∫≠p nh·∫≠t th·ªëng k√™ m·ªõi nh·∫•t"):
    st.rerun()

# JavaScript for dynamic effects
st.markdown("""
<script>
// Add some dynamic effects
document.addEventListener('DOMContentLoaded', function() {
    // Animate feature cards on scroll
    const cards = document.querySelectorAll('.feature-card');
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
            }
        });
    });
    
    cards.forEach(card => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(20px)';
        card.style.transition = 'all 0.6s ease';
        observer.observe(card);
    });
});
</script>
""", unsafe_allow_html=True)