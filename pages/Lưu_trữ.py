import streamlit as st
import os
import json
import base64
from datetime import datetime
from pathlib import Path
import fitz  # PyMuPDF for PDF handling
from PIL import Image
import io
import hashlib
import uuid
from RAG.processPDF import update_pdf_data, read_vectordb, ask_with_monica, template, init_faiss_db
from utils.authentification import require_login, show_user_info, get_current_user

# ===== KI·ªÇM TRA ƒêƒÇNG NH·∫¨P =====
if not require_login("TutorBot - AI Tutor Assistant"):
    exit()

# Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng trong sidebar
show_user_info()

# C·∫•u h√¨nh
UPLOAD_DIR = "archives/uploads"
SEARCH_RESULTS_DIR = "archives/search_results"
THUMBNAILS_DIR = "archives/thumbnails"

# ƒê·∫£m b·∫£o c√°c th∆∞ m·ª•c t·ªìn t·∫°i
for directory in [UPLOAD_DIR, SEARCH_RESULTS_DIR, THUMBNAILS_DIR]:
    os.makedirs(directory, exist_ok=True)

class ArchiveProtocol:
    """Giao th·ª©c cho vi·ªác giao ti·∫øp gi·ªØa chatbot v√† h·ªá th·ªëng l∆∞u tr·ªØ"""
    
    @staticmethod
    def save_search_result(query, results, metadata=None):
        """L∆∞u k·∫øt qu·∫£ t√¨m ki·∫øm web v√†o kho l∆∞u tr·ªØ"""
        timestamp = datetime.now().isoformat()
        result_id = str(uuid.uuid4())
        
        search_data = {
            "id": result_id,
            "query": query,
            "results": results,
            "timestamp": timestamp,
            "metadata": metadata or {},
            "type": "web_search"
        }
        
        # L∆∞u v√†o t·ªáp JSON
        filename = f"search_{result_id}.json"
        filepath = os.path.join(SEARCH_RESULTS_DIR, filename)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(search_data, f, indent=2, ensure_ascii=False)
        
        # T·∫°o thumbnail cho k·∫øt qu·∫£ t√¨m ki·∫øm
        ArchiveProtocol.generate_search_thumbnail(result_id, query, results)
        
        return result_id
    
    @staticmethod
    def generate_search_thumbnail(result_id, query, results):
        """T·∫°o thumbnail cho k·∫øt qu·∫£ t√¨m ki·∫øm"""
        # T·∫°o m·ªôt h√¨nh ·∫£nh thumbnail ƒë∆°n gi·∫£n cho k·∫øt qu·∫£ t√¨m ki·∫øm
        img = Image.new('RGB', (200, 150), color='lightblue')
        # Trong m·ªôt tri·ªÉn khai th·ª±c t·∫ø, b·∫°n c√≥ th·ªÉ mu·ªën s·ª≠ d·ª•ng ImageDraw c·ªßa PIL
        # ƒë·ªÉ th√™m vƒÉn b·∫£n ho·∫∑c t·∫°o m·ªôt thumbnail ph·ª©c t·∫°p h∆°n
        
        thumbnail_path = os.path.join(THUMBNAILS_DIR, f"search_{result_id}.png")
        img.save(thumbnail_path)
        
        return thumbnail_path

class ArchiveManager:
    """L·ªõp qu·∫£n l√Ω kho l∆∞u tr·ªØ ch√≠nh"""
    
    def __init__(self):
        self.protocol = ArchiveProtocol()
    
    def save_uploaded_file(self, uploaded_file):
        """L∆∞u t·ªáp ƒë√£ t·∫£i l√™n v√† t·∫°o thumbnail"""
        if uploaded_file is not None:
            # T·∫°o t√™n t·ªáp duy nh·∫•t
            file_hash = hashlib.md5(uploaded_file.getvalue()).hexdigest()[:8]
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{timestamp}_{file_hash}_{uploaded_file.name}"
            filepath = os.path.join(UPLOAD_DIR, filename)
            
            # L∆∞u t·ªáp
            with open(filepath, "wb") as f:
                f.write(uploaded_file.getbuffer())
            
            # T·∫°o thumbnail
            self.generate_pdf_thumbnail(filepath)
            
            # init_faiss_db()
            update_pdf_data([filename])

            return filepath
        return None
    
    def delete_file(self, item):
        """Xo√° t·ªáp v√† thumbnail li√™n quan"""
        try:
            if item.get("type") == "uploaded_file":
                # Xo√° t·ªáp g·ªëc
                if os.path.exists(item["path"]):
                    os.remove(item["path"])
                
                # Xo√° thumbnail
                thumbnail_path = self.get_thumbnail_path(item)
                if thumbnail_path and os.path.exists(thumbnail_path):
                    os.remove(thumbnail_path)
                
                # # Xo√° d·ªØ li·ªáu trong c∆° s·ªü d·ªØ li·ªáu FAISS
                # faiss_path = '../vector/db_faiss'
                # for filename in os.listdir(faiss_path):
                #     file_path = os.path.join(faiss_path, filename)
                #     try:
                #         if os.path.isfile(file_path):
                #             os.remove(file_path)  # X√≥a t·ªáp
                #             print(f'ƒê√£ x√≥a t·ªáp: {file_path}')
                #     except Exception as e:
                #         print(f'L·ªói khi x√≥a t·ªáp {file_path}: {e}')
                
            elif item.get("type") == "web_search":
                # Xo√° t·ªáp JSON k·∫øt qu·∫£ t√¨m ki·∫øm
                search_file = os.path.join(SEARCH_RESULTS_DIR, f"search_{item['id']}.json")
                if os.path.exists(search_file):
                    os.remove(search_file)
                
                # Xo√° thumbnail
                thumbnail_path = self.get_thumbnail_path(item)
                if thumbnail_path and os.path.exists(thumbnail_path):
                    os.remove(thumbnail_path)
                
                return True
                
        except Exception as e:
            st.error(f"L·ªói khi xo√° t·ªáp: {str(e)}")
            return False
        
        return False
    
    def generate_pdf_thumbnail(self, filepath):
        """T·∫°o thumbnail cho t·ªáp PDF"""
        try:
            # M·ªü PDF v√† l·∫•y trang ƒë·∫ßu ti√™n
            doc = fitz.open(filepath)
            page = doc[0]
            
            # Render trang d∆∞·ªõi d·∫°ng h√¨nh ·∫£nh
            pix = page.get_pixmap(matrix=fitz.Matrix(0.5, 0.5))
            img_data = pix.tobytes("png")
            
            # L∆∞u thumbnail
            filename = Path(filepath).stem + ".png"
            thumbnail_path = os.path.join(THUMBNAILS_DIR, filename)
            
            with open(thumbnail_path, "wb") as f:
                f.write(img_data)
            
            doc.close()
            return thumbnail_path
            
        except Exception as e:
            st.error(f"L·ªói khi t·∫°o thumbnail: {str(e)}")
            return None
    
    def get_uploaded_files(self):
        """L·∫•y danh s√°ch c√°c t·ªáp ƒë√£ t·∫£i l√™n v·ªõi th√¥ng tin metadata"""
        files = []
        if os.path.exists(UPLOAD_DIR):
            for filename in os.listdir(UPLOAD_DIR):
                filepath = os.path.join(UPLOAD_DIR, filename)
                if os.path.isfile(filepath):
                    stat = os.stat(filepath)
                    files.append({
                        "name": filename,
                        "path": filepath,
                        "size": stat.st_size,
                        "modified": datetime.fromtimestamp(stat.st_mtime),
                        "type": "uploaded_file"
                    })
        return sorted(files, key=lambda x: x["modified"], reverse=True)
    
    def get_search_results(self):
        """L·∫•y danh s√°ch c√°c k·∫øt qu·∫£ t√¨m ki·∫øm ƒë√£ l∆∞u"""
        results = []
        if os.path.exists(SEARCH_RESULTS_DIR):
            for filename in os.listdir(SEARCH_RESULTS_DIR):
                if filename.endswith('.json'):
                    filepath = os.path.join(SEARCH_RESULTS_DIR, filename)
                    try:
                        with open(filepath, 'r', encoding='utf-8') as f:
                            data = json.load(f)
                            results.append(data)
                    except Exception as e:
                        st.error(f"L·ªói khi ƒë·ªçc {filename}: {str(e)}")
        return sorted(results, key=lambda x: x.get("timestamp", ""), reverse=True)
    
    def get_thumbnail_path(self, item):
        """L·∫•y ƒë∆∞·ªùng d·∫´n thumbnail cho m·ªôt m·ª•c"""
        if item.get("type") == "uploaded_file":
            filename = Path(item["name"]).stem + ".png"
            return os.path.join(THUMBNAILS_DIR, filename)
        elif item.get("type") == "web_search":
            return os.path.join(THUMBNAILS_DIR, f"search_{item['id']}.png")
        return None

def display_pdf_viewer(filepath):
    """Hi·ªÉn th·ªã PDF trong Streamlit"""
    try:
        with open(filepath, "rb") as f:
            base64_pdf = base64.b64encode(f.read()).decode('utf-8')
        
        pdf_display = f"""
        <iframe src="data:application/pdf;base64,{base64_pdf}" 
                width="100%" height="600" type="application/pdf">
        </iframe>
        """
        st.markdown(pdf_display, unsafe_allow_html=True)
    except Exception as e:
        st.error(f"L·ªói khi hi·ªÉn th·ªã PDF: {str(e)}")

def display_search_result(result_data):
    """Hi·ªÉn th·ªã chi ti·∫øt k·∫øt qu·∫£ t√¨m ki·∫øm"""
    st.subheader(f"C√¢u h·ªèi t√¨m ki·∫øm: {result_data['query']}")
    st.write(f"**Th·ªùi gian:** {result_data['timestamp']}")
    
    if result_data.get('metadata'):
        st.write("**Th√¥ng tin b·ªï sung:**")
        st.json(result_data['metadata'])
    
    st.write("**K·∫øt qu·∫£:**")
    if isinstance(result_data['results'], list):
        for i, result in enumerate(result_data['results'], 1):
            st.write(f"{i}. {result}")
    else:
        st.write(result_data['results'])

def main():
    st.set_page_config(page_title="Kho L∆∞u Tr·ªØ", layout="wide")
    
    st.title("üìÅ Kho L∆∞u Tr·ªØ")
    st.markdown("---")
    
    # Kh·ªüi t·∫°o qu·∫£n l√Ω kho l∆∞u tr·ªØ
    archive_manager = ArchiveManager()
    
    # T·∫°o c√°c tab
    tab1, tab2 = st.tabs(["üì§ T·∫£i L√™n T·ªáp", "üóÇÔ∏è Xem Kho L∆∞u Tr·ªØ"])
    
    with tab1:
        st.header("T·∫£i L√™n T·ªáp")
        
        uploaded_file = st.file_uploader(
            "Ch·ªçn t·ªáp PDF",
            type=['pdf'],
            help="T·∫£i l√™n c√°c t·ªáp PDF ƒë·ªÉ th√™m v√†o kho l∆∞u tr·ªØ c·ªßa b·∫°n"
        )
        
        if uploaded_file is not None:
            if st.button("L∆∞u v√†o Kho L∆∞u Tr·ªØ"):
                with st.spinner("ƒêang l∆∞u t·ªáp, ghi v√†o c∆° s·ªü d·ªØ li·ªáu v√† t·∫°o thumbnail..."):
                    saved_path = archive_manager.save_uploaded_file(uploaded_file)
                    if saved_path:
                        st.success(f"T·ªáp ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!")
                        st.info(f"ƒê√£ l∆∞u t·∫°i: {saved_path}")
                    else:
                        st.error("L∆∞u t·ªáp kh√¥ng th√†nh c√¥ng")
    
    with tab2:
        st.header("Tr√¨nh Duy·ªát Kho L∆∞u Tr·ªØ")
        
        # L·∫•y t·∫•t c·∫£ c√°c m·ª•c
        uploaded_files = archive_manager.get_uploaded_files()
        search_results = archive_manager.get_search_results()
        
        # K·∫øt h·ª£p v√† s·∫Øp x·∫øp t·∫•t c·∫£ c√°c m·ª•c
        all_items = []
        all_items.extend(uploaded_files)
        all_items.extend(search_results)
        
        if not all_items:
            st.info("Ch∆∞a c√≥ m·ª•c n√†o trong kho l∆∞u tr·ªØ. T·∫£i l√™n m·ªôt s·ªë t·ªáp ho·∫∑c th·ª±c hi·ªán t√¨m ki·∫øm web ƒë·ªÉ l√†m ƒë·∫ßy kho l∆∞u tr·ªØ.")
            return
        
        # Hi·ªÉn th·ªã c√°c m·ª•c trong m·ªôt l∆∞·ªõi
        cols = st.columns(3)
        
        for i, item in enumerate(all_items):
            with cols[i % 3]:
                # Hi·ªÉn th·ªã thumbnail
                thumbnail_path = archive_manager.get_thumbnail_path(item)
                if thumbnail_path and os.path.exists(thumbnail_path):
                    st.image(thumbnail_path, use_container_width=True)
                else:
                    st.info("Kh√¥ng c√≥ thumbnail kh·∫£ d·ª•ng")
                
                # Hi·ªÉn th·ªã th√¥ng tin m·ª•c
                if item.get("type") == "uploaded_file":
                    st.write(f"**üìÑ {item['name']}**")
                    st.write(f"K√≠ch th∆∞·ªõc: {item['size']} bytes")
                    st.write(f"ƒê√£ s·ª≠a ƒë·ªïi: {item['modified'].strftime('%Y-%m-%d %H:%M')}")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button(f"Xem", key=f"view_{i}"):
                            st.session_state[f"viewing_{i}"] = True
                    
                    with col2:
                        if st.button(f"Xo√°", key=f"delete_{i}", type="secondary"):
                            st.session_state[f"show_delete_confirm_{i}"] = True
                
                elif item.get("type") == "web_search":
                    st.write(f"**üîç T√¨m ki·∫øm: {item['query']}**")
                    st.write(f"Th·ªùi gian: {item['timestamp'][:16]}")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button(f"Xem K·∫øt Qu·∫£", key=f"search_{i}"):
                            st.session_state[f"viewing_search_{i}"] = True
                    
                    with col2:
                        if st.button(f"Xo√°", key=f"delete_search_{i}", type="secondary"):
                            st.session_state[f"show_delete_confirm_{i}"] = True
                
                # Hi·ªÉn th·ªã dialog x√°c nh·∫≠n xo√°
                if st.session_state.get(f"show_delete_confirm_{i}"):
                    item_name = item.get('name', item.get('query', 'Kh√¥ng r√µ t√™n'))
                    st.warning(f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° t·ªáp **{item_name}**?")
                    
                    col1, col2, col3 = st.columns([1, 1, 2])
                    
                    with col1:
                        if st.button("C√≥", key=f"confirm_yes_{i}", type="primary"):
                            # X√°c nh·∫≠n xo√°
                            if archive_manager.delete_file(item):
                                st.success(f"ƒê√£ xo√° th√†nh c√¥ng!")
                                st.session_state[f"show_delete_confirm_{i}"] = False
                                st.rerun()
                            else:
                                st.error("Xo√° t·ªáp kh√¥ng th√†nh c√¥ng!")
                    
                    with col2:
                        if st.button("Kh√¥ng", key=f"confirm_no_{i}"):
                            # Hu·ª∑ xo√°
                            st.session_state[f"show_delete_confirm_{i}"] = False
                            st.rerun()
                
                st.markdown("---")
        
        # Hi·ªÉn th·ªã tr√¨nh xem d·ª±a tr√™n tr·∫°ng th√°i phi√™n
        for i, item in enumerate(all_items):
            if item.get("type") == "uploaded_file" and st.session_state.get(f"viewing_{i}"):
                st.subheader(f"ƒêang xem: {item['name']}")
                if st.button(f"ƒê√≥ng", key=f"close_{i}"):
                    st.session_state[f"viewing_{i}"] = False
                    st.rerun()
                
                display_pdf_viewer(item['path'])
            
            elif item.get("type") == "web_search" and st.session_state.get(f"viewing_search_{i}"):
                st.subheader("Chi ti·∫øt K·∫øt Qu·∫£ T√¨m Ki·∫øm")
                if st.button(f"ƒê√≥ng T√¨m Ki·∫øm", key=f"close_search_{i}"):
                    st.session_state[f"viewing_search_{i}"] = False
                    st.rerun()
                
                display_search_result(item)

# API endpoints for chatbot integration
def chatbot_save_search_result(query, results, metadata=None):
    """
    H√†m ƒë∆∞·ª£c g·ªçi b·ªüi chatbot khi th·ª±c hi·ªán t√¨m ki·∫øm web
    
    Args:
        query (str): C√¢u h·ªèi t√¨m ki·∫øm
        results (list or str): K·∫øt qu·∫£ t√¨m ki·∫øm
        metadata (dict): Th√¥ng tin b·ªï sung
    
    Returns:
        str: ID k·∫øt qu·∫£ ƒë·ªÉ tham kh·∫£o
    """
    return ArchiveProtocol.save_search_result(query, results, metadata)

if __name__ == "__main__":
    main()
